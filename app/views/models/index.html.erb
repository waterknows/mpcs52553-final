<head><meta charset="utf-8" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>

<div class="tab-content">
    <div id="models" class="tab-pane fade in show active">
        <div class="col-sm-12">
            <ul class="nav nav-pills">
                <li class="active"><a href="/models"> Source Code </a></li>
                <li><a href="/models/show"> Visualization </a></li>
            </ul>
        </div>
    </div>
</div>

<div class="page-header">
</div>

<div class="row">
<div class="col-sm-12">
<p>Below is the source code of a pre-trained Latent Dirichlet allocation (LDA) model trained by 10K documents (abstracts from 10K computer science papers). It demonstrates an unsupervised approach to tag text data such as reports, opinions, questions, etc. Given the limited size of training data, the model is far from perfect and only works well with text of similar type.</p>
</div>
</div>



<!-- Custom stylesheet, it must be in the same directory as the html file -->
<link rel="stylesheet" href="custom.css">

<!-- Loading mathjax macro -->
<!-- Load mathjax -->
    <script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"></script>
    <!-- MathJax configuration -->
    <script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        tex2jax: {
            inlineMath: [ ['$','$'], ["\\(","\\)"] ],
            displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
            processEscapes: true,
            processEnvironments: true
        },
        // Center justify equations in code and markdown cells. Elsewhere
        // we use CSS to left justify single line equations in code cells.
        displayAlign: 'center',
        "HTML-CSS": {
            styles: {'.MathJax_Display': {"margin": 0}},
            linebreaks: { automatic: true }
        }
    });
    </script>
    <!-- End of mathjax configuration --></head>
<body>
  <div tabindex="-1" id="notebook" class="border-box-sizing">
    <div class="container" id="notebook-container">

<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">string</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">collections</span>
<span class="kn">import</span> <span class="nn">pickle</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">nltk</span>
<span class="kn">import</span> <span class="nn">sklearn</span>
<span class="kn">import</span> <span class="nn">lda</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># prepare input for LDA model</span>
<span class="k">def</span> <span class="nf">text2vec</span><span class="p">(</span><span class="n">docs</span><span class="p">,</span><span class="n">mode</span><span class="p">,</span><span class="n">vocabulary</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
    <span class="n">count_vectorizer</span> <span class="o">=</span> <span class="n">sklearn</span><span class="o">.</span><span class="n">feature_extraction</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">CountVectorizer</span><span class="p">(</span><span class="n">max_df</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">min_df</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">tokenizer</span><span class="o">=</span><span class="k">lambda</span> <span class="n">text</span><span class="p">:</span> <span class="n">tokenize_lemmatize</span><span class="p">(</span><span class="n">text</span><span class="p">,</span><span class="n">lemmatize</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span><span class="n">stem</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span> 
        <span class="n">lowercase</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">vocabulary</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
        <span class="n">count_vectorizer</span> <span class="o">=</span> <span class="n">sklearn</span><span class="o">.</span><span class="n">feature_extraction</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">CountVectorizer</span><span class="p">(</span><span class="n">max_df</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">min_df</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">tokenizer</span><span class="o">=</span><span class="k">lambda</span> <span class="n">text</span><span class="p">:</span> <span class="n">tokenize_lemmatize</span><span class="p">(</span><span class="n">text</span><span class="p">,</span><span class="n">lemmatize</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span><span class="n">stem</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span> 
            <span class="n">lowercase</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">vocabulary</span> <span class="o">=</span> <span class="n">vocabulary</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">vectors</span> <span class="o">=</span> <span class="n">count_vectorizer</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="n">vectors</span> <span class="o">=</span> <span class="n">count_vectorizer</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">([</span><span class="n">docs</span><span class="p">])</span>
    <span class="n">vocab</span> <span class="o">=</span> <span class="n">count_vectorizer</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="s2">&quot;save&quot;</span><span class="p">:</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;python/lda_vocab.pkl&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">vocab</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;python/lda_vector.pkl&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">vectors</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">vectors</span><span class="p">,</span> <span class="n">vocab</span>

<span class="c1">#train LDA model</span>
<span class="k">def</span> <span class="nf">train_lda</span><span class="p">(</span><span class="n">vector</span><span class="p">,</span> <span class="n">topics</span><span class="p">,</span> <span class="n">iters</span><span class="p">):</span>
    <span class="n">lda_model</span> <span class="o">=</span> <span class="n">lda</span><span class="o">.</span><span class="n">LDA</span><span class="p">(</span><span class="n">n_topics</span><span class="o">=</span><span class="n">topics</span><span class="p">,</span> <span class="n">n_iter</span><span class="o">=</span><span class="n">iters</span><span class="p">)</span>
    <span class="n">X_topics</span> <span class="o">=</span> <span class="n">lda_model</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">vector</span><span class="p">)</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;python/lda.pkl&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">lda_model</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">X_topics</span><span class="p">,</span> <span class="n">lda_model</span>

<span class="c1">#################Supplementary functions################</span>
<span class="k">def</span> <span class="nf">tokenize_lemmatize</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">stop</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">lemmatize</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="n">stem</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="n">exclude</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">punctuation</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">ch</span> <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="n">text</span> <span class="k">if</span> <span class="n">ch</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">exclude</span><span class="p">])</span> <span class="c1">#removing punctuations</span>
    <span class="n">tokens</span> <span class="o">=</span> <span class="p">[</span><span class="n">token</span> <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">nltk</span><span class="o">.</span><span class="n">word_tokenize</span><span class="p">(</span><span class="n">text</span><span class="p">)]</span> <span class="c1">#tokenization</span>
    <span class="k">if</span> <span class="n">stop</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
        <span class="n">stop</span><span class="o">=</span><span class="n">nltk</span><span class="o">.</span><span class="n">corpus</span><span class="o">.</span><span class="n">stopwords</span><span class="o">.</span><span class="n">words</span><span class="p">(</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
        <span class="n">tokens</span> <span class="o">=</span> <span class="p">[</span><span class="n">token</span> <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">tokens</span> <span class="k">if</span> <span class="n">token</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stop</span><span class="p">]</span> <span class="c1">#removing stopwords</span>
    <span class="k">if</span> <span class="n">lemmatize</span><span class="o">==</span><span class="kc">True</span><span class="p">:</span>
        <span class="n">wnl</span> <span class="o">=</span> <span class="n">nltk</span><span class="o">.</span><span class="n">stem</span><span class="o">.</span><span class="n">WordNetLemmatizer</span><span class="p">()</span>
        <span class="n">tokens</span> <span class="o">=</span> <span class="p">[</span><span class="n">wnl</span><span class="o">.</span><span class="n">lemmatize</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tokens</span><span class="p">]</span> <span class="c1">#lemmatizing</span>
    <span class="k">if</span> <span class="n">stem</span><span class="o">==</span><span class="kc">True</span><span class="p">:</span>
        <span class="n">lst</span> <span class="o">=</span> <span class="n">nltk</span><span class="o">.</span><span class="n">stem</span><span class="o">.</span><span class="n">lancaster</span><span class="o">.</span><span class="n">LancasterStemmer</span><span class="p">()</span>
        <span class="n">tokens</span> <span class="o">=</span> <span class="p">[</span><span class="n">lst</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tokens</span><span class="p">]</span> <span class="c1">#lemmatizing</span>
    <span class="k">return</span> <span class="n">tokens</span>

<span class="k">def</span> <span class="nf">print_lda</span><span class="p">(</span><span class="n">lda_model</span><span class="p">,</span> <span class="n">vocab</span><span class="p">):</span>
    <span class="n">n_top_words</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="n">topic_summaries</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">topic_word</span> <span class="o">=</span> <span class="n">lda_model</span><span class="o">.</span><span class="n">topic_word_</span>  <span class="c1"># get the topic words</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">topic_dist</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">topic_word</span><span class="p">):</span>
        <span class="n">topic_words</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">vocab</span><span class="p">)[</span><span class="n">np</span><span class="o">.</span><span class="n">argsort</span><span class="p">(</span><span class="n">topic_dist</span><span class="p">)][:</span><span class="o">-</span><span class="p">(</span><span class="n">n_top_words</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">topic_summaries</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">topic_words</span><span class="p">))</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Area </span><span class="si">{}</span><span class="s1">: </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">topic_words</span><span class="p">)))</span>

<span class="k">def</span> <span class="nf">tag_lda</span><span class="p">(</span><span class="n">docs</span><span class="p">,</span><span class="n">vocab</span><span class="p">,</span><span class="n">model</span><span class="p">,</span><span class="n">mode</span><span class="p">):</span>
    <span class="n">lda_keys</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">test</span> <span class="o">=</span> <span class="n">text2vec</span><span class="p">(</span><span class="n">docs</span><span class="p">,</span><span class="n">mode</span><span class="p">,</span><span class="n">vocab</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">test</span><span class="p">:</span>
        <span class="n">topic_num</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">row</span><span class="p">)</span><span class="o">.</span><span class="n">argmax</span><span class="p">()</span>
        <span class="n">lda_keys</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">topic_num</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">lda_keys</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">input_file</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">test_data</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">input_file</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
        <span class="n">df</span><span class="o">=</span><span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">input_file</span><span class="p">)</span>
    <span class="n">output</span><span class="o">=</span><span class="p">[]</span>
    <span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="s1">&#39;save&#39;</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">type</span> <span class="o">==</span> <span class="s1">&#39;lda&#39;</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Preparing input...&#39;</span><span class="p">)</span>
            <span class="n">vec</span><span class="p">,</span> <span class="n">vocab</span> <span class="o">=</span> <span class="n">text2vec</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;description&#39;</span><span class="p">],</span><span class="n">mode</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Trainning and saving LDA...&#39;</span><span class="p">)</span>
            <span class="n">X_topics</span><span class="p">,</span> <span class="n">lda_model</span> <span class="o">=</span> <span class="n">train_lda</span><span class="p">(</span><span class="n">vec</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">2000</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="s1">&#39;apply&#39;</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">type</span> <span class="o">==</span> <span class="s1">&#39;lda&#39;</span><span class="p">:</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;python/lda.pkl&#39;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">lda_model</span><span class="o">=</span><span class="n">pickle</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;python/lda_vocab.pkl&#39;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">vocab</span><span class="o">=</span><span class="n">pickle</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
            <span class="n">docs</span> <span class="o">=</span> <span class="n">test_data</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;===&quot;</span><span class="p">)</span>
            <span class="n">output</span> <span class="o">=</span> <span class="n">tag_lda</span><span class="p">(</span><span class="n">docs</span><span class="p">,</span><span class="n">vocab</span><span class="p">,</span><span class="n">lda_model</span><span class="p">,</span><span class="n">mode</span><span class="p">)</span> 
    <span class="k">return</span> <span class="nb">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;apply&#39;</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span><span class="o">==</span><span class="mi">4</span><span class="p">:</span> <span class="c1">#apply mode</span>
        <span class="c1">#try:</span>
        <span class="n">main</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">mode</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="n">test_data</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
        <span class="c1">#except:</span>
            <span class="c1">#print(&#39;Correct usage: python similar_doc.py model(lda/doc2vec) apply test_data&#39;)</span>
    <span class="k">elif</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;save&#39;</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span><span class="o">==</span><span class="mi">4</span><span class="p">:</span> <span class="c1">#save mode</span>
        <span class="c1">#try:</span>
        <span class="n">main</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">mode</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="n">input_file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
        <span class="c1">#except:</span>
            <span class="c1">#print(&#39;Correct usage: python similar_doc.py model(lda/doc2vec) save input_file&#39;)</span>
            <span class="c1">#e.g. python similar_doc.py Project_Goals_Data.xlsx doc2vec save</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Correct usage: python similar_doc.py model(lda/doc2vec) mode(save/apply) input_file (save mode) test_data(apply mode)&#39;</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
    </div>
  </div>
